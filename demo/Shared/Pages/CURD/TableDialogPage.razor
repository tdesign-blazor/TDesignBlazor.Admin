@page "/templates/table_dialog"
@using System.Linq.Expressions;

<PageHeader Title="表格和对话框模板">
    使用表格和对话框实现增删改查的页面功能
</PageHeader>

<TableDialogTemplate TCreate="WeatherForecast"
                     TUpdate="WeatherForecast"
                     TList="WeatherForecast"
                     TListFilter="WeatherForecast"
                     TDetail="WeatherForecast"
                     PageTitle="天气"
                     ListDataSourceProvider="GetData"
                     DetailDataSourceProvider="Get"
                     OnFormCreating="Create"
                     OnFormUpdating="Update"
                     OnConfirmDeleting="Delete"
                     Key="m=>m.Id"
>
    <CreateFormContent>
        <TFormItem For="()=>context.TemperatureC" Label="城市">
            <TInputText @bind-Value="context.Summary" />
        </TFormItem>
        <TFormItem For="()=>context.TemperatureC" Label="摄氏度">
            <TInputText @bind-Value="context.TemperatureC" />
        </TFormItem>
    </CreateFormContent>
    <EditFormContent>
        <TFormItem For="()=>context.TemperatureC" Label="城市">
            <TInputText @bind-Value="context.Summary" />
        </TFormItem>
        <TFormItem For="()=>context.TemperatureC" Label="摄氏度">
            <TInputText @bind-Value="context.TemperatureC" />
        </TFormItem>
    </EditFormContent>
    <TableColumnContent>
        <TTableFieldColumn Header="Id" TItem="WeatherForecast" TField="int" Field="p=>p.Id" />
        <TTableFieldColumn Header="日期" TItem="WeatherForecast" TField="DateOnly" Field="p=>p.Date" Format="yyyy-MM-dd" />
        <TTableFieldColumn Header="摄氏度" TItem="WeatherForecast" TField="int" Field="p=>p.TemperatureC" />
        <TTableFieldColumn Header="华氏度" TItem="WeatherForecast" TField="int" Field="p=>p.TemperatureF" />
        <TTableFieldColumn Header="备注" TItem="WeatherForecast" TField="string" Field="p=>p.Summary" />
    </TableColumnContent>
</TableDialogTemplate>


@inject HttpClient Client

@code {
    async Task<DataSource<WeatherForecast>> GetData()
    {
        var data = WeatherForecast.Data;
        return DataSource<WeatherForecast>.Parse(data);
    }

    Task<WeatherForecast?> Get(object key)
    {
        var data = WeatherForecast.Gets().SingleOrDefault(m => m.Id.Equals(key));
        return Task.FromResult(data);
    }

    Task Create(WeatherForecast model)
    {
        WeatherForecast.Data.Add(model);
        return Task.CompletedTask;
    }

    Task Update(WeatherForecast model)
    {
        var data = WeatherForecast.Gets().SingleOrDefault(m => m.Id.Equals(model.Id));
        data.TemperatureC = model.TemperatureC;
        data.Summary = model.Summary;
        return Task.CompletedTask;
    }

    Task Delete(WeatherForecast model)
    {
        WeatherForecast.Data.Remove(model);
        return Task.CompletedTask;
    }
}